name: Test GitHub Action

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-json-variables:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create test templates
        run: |
          mkdir -p test/templates
          mkdir -p test/output
          
          echo '# Config for {{ app_name }} v{{ version }}' > test/templates/config.conf.j2
          echo '# Features:' >> test/templates/config.conf.j2
          echo '{% for feature in features %}' >> test/templates/config.conf.j2
          echo '# - {{ feature }}' >> test/templates/config.conf.j2
          echo '{% endfor %}' >> test/templates/config.conf.j2
          
          echo '{"app_name": "TestApp", "version": "1.0.0", "features": ["a", "b", "c"]}' > test/variables.json

      - name: Test with Variables File
        uses: ./
        with:
          template_path: './test/templates'
          output_path: './test/output'
          variables_file: './test/variables.json'

      - name: Verify Output
        run: |
          if [ ! -f test/output/config.conf ]; then
            echo "Output file not created"
            exit 1
          fi
          
          if ! grep -q "Config for TestApp" test/output/config.conf; then
            echo "Template not rendered correctly"
            cat test/output/config.conf
            exit 1
          fi
          
          echo "Test with variables file passed!"
          cat test/output/config.conf

  test-key-value-variables:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create test templates
        run: |
          mkdir -p test/templates
          mkdir -p test/output
          
          echo '# App: {{ app_name }}' > test/templates/app.conf.j2
          echo '# Version: {{ version }}' >> test/templates/app.conf.j2
          echo '# Debug: {{ debug }}' >> test/templates/app.conf.j2

      - name: Test with Key-Value Variables
        id: render
        uses: ./
        with:
          template_path: './test/templates/app.conf.j2'
          output_path: './test/output/app.conf'
          variables: |
            app_name=TestApp
            version=2.0.0
            debug=true

      - name: Verify Key-Value Output
        run: |
          if [ ! -f test/output/app.conf ]; then
            echo "Output file not created"
            exit 1
          fi
          
          if ! grep -q "App: TestApp" test/output/app.conf; then
            echo "Template not rendered correctly"
            cat test/output/app.conf
            exit 1
          fi
          
          if ! grep -q "Debug: true" test/output/app.conf; then
            echo "Boolean conversion failed"
            cat test/output/app.conf
            exit 1
          fi
          
          echo "Test with key-value variables passed!"
          cat test/output/app.conf
          echo "Rendered files: ${{ steps.render.outputs.rendered_files }}"

  test-strict-mode:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create test templates
        run: |
          mkdir -p test/templates
          mkdir -p test/output
          
          echo '# Value: {{ defined_var }}' > test/templates/strict.conf.j2
          echo '# Missing: {{ undefined_var }}' >> test/templates/strict.conf.j2

      - name: Test Strict Mode (should fail)
        id: strict-test
        uses: ./
        continue-on-error: true
        with:
          template_path: './test/templates/strict.conf.j2'
          output_path: './test/output/strict.conf'
          variables: 'defined_var=exists'
          strict: 'true'

      - name: Verify Strict Mode Behavior
        run: |
          if [ "${{ steps.strict-test.outcome }}" != "failure" ]; then
            echo "Strict mode did not fail on undefined variable"
            exit 1
          fi
          
          echo "Strict mode test passed!"

  test-multiarch:
    runs-on: ubuntu-latest
    needs: [test-json-variables, test-key-value-variables]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build for multiple architectures
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          load: false